(* ::Package:: *)

(* ::Section::Initialization:: *)
(*The Bonizzoni Group - Electrochemistry Toolkit*)


(* ::Input::Initialization:: *)
(* The following forces the automatic generation / overwriting of an .m package file from this file every time this file is saved. *)
SetOptions[InputNotebook[],AutoGeneratedPackage->Automatic]


(* ::Input::Initialization:: *)
BeginPackage["echem`"]

Unprotect[importEIS,iFileToColumns,iProcessFile];
ClearAll[importEIS,iFileToColumns,iProcessFile];


(* ::Input::Initialization:: *)
importEIS::usage="usage for importEIS"


(* ::Section::Initialization:: *)
(*Implementation code below*)


(* ::Input::Initialization:: *)
Begin["`Private`"]


(* ::Section:: *)
(*importEIS: helper function to import EIS data*)


(* ::Text:: *)
(*The imporEIS function can import data from a folder and produces two formats, either for plotting as an association, or for further processing with e.g. PCA or LDA as a matrix with column and row headers*)


(* ::Input::Initialization:: *)
importEIS[directory_String,format_String:"*.csv","output"->"plot"]:=Association[iProcessFile/@FileNames[format,directory]]
importEIS[directory_String,format_String:"*.csv"]:=Join[##,2]&@@(iFileToColumns/@FileNames[format,directory])
importEIS[sampleNamesandLocations_List?(VectorQ[#,Head[#]===Rule&]&),format_String:"*.csv"]:=
Module[
{samplenames,locations,datamatrix,columnheaders},

(*Keys[] and Values[] also work on a list of Rules, the same as on an association*)
samplenames=Keys@sampleNamesandLocations;
locations=Values@sampleNamesandLocations;

columnheaders=importEIS[locations[[1]],format][[1]];
datamatrix=(importEIS[#,format]&/@locations)[[All,2]];
Join[List/@Insert[samplenames,"",1],Insert[datamatrix,columnheaders,1],2]
]

iFileToColumns[file_String]:=Module[
{biasVtoLabelRule,raw,biasVoltage,dataSection,allData,frequencyLabels,responses},
biasVtoLabelRule=Thread[
{825200.`,681200.`,562300.`,464000.`,383100.`,316200.`,260900.`,215400.`,177800.`,146700.`,121100.`,99960.`,82520.`,68120.`,56230.`,46400.`,38280.`,31590.`,26070.`,21530.`,17770.`,14670.`,12110.`,9985.`,8179.`,6738.`,5566.`,4590.`,3809.`,3125.`,2588.`,2148.`,1758.`,1465.`,1196.`,976.6`,825.4`,681.3`,562.3`,464.2`,383.1`,316.2`,261.`,215.4`,177.8`,146.8`,121.2`,100.`,82.54`,68.13`,56.23`,46.42`,38.31`,31.62`,26.1`,21.54`,17.78`,14.68`,12.12`,10.`,8.254`,6.813`,5.623`,4.642`,3.831`,3.162`,2.61`,2.154`,1.778`,1.468`,1.212`,1.`,0.8254`,0.6813`,0.5623`,0.4642`}
->
{"80E+04Hz","70E+04Hz","60E+04Hz","50E+04Hz","40E+04Hz","30E+04Hz","25E+04Hz","20E+04Hz","18E+04Hz","15E+04Hz","12E+04Hz","10E+04Hz","80E+03Hz","70E+03Hz","60E+03Hz","50E+03Hz","40E+03Hz","30E+03Hz","25E+03Hz","20E+03Hz","18E+03Hz","15E+03Hz","12E+03Hz","10E+03Hz","80E+02Hz","70E+02Hz","60E+02Hz","50E+02Hz","40E+02Hz","30E+02Hz","25E+02Hz","20E+02Hz","18E+02Hz","15E+02Hz","12E+02Hz","10E+02Hz","80E+01Hz","70E+01Hz","60E+01Hz","50E+01Hz","40E+01Hz","30E+01Hz","25E+01Hz","20E+01Hz","18E+01Hz","15E+01Hz","12E+01Hz","10E+01Hz","80E+00Hz","70E+00Hz","60E+00Hz","50E+00Hz","40E+00Hz","30E+00Hz","25E+00Hz","20E+00Hz","18E+00Hz","15E+00Hz","12E+00Hz","10E+00Hz","80E-01Hz","70E-01Hz","60E-01Hz","50E-01Hz","40E-01Hz","30E-01Hz","25E-01Hz","20E-01Hz","18E-01Hz","15E-01Hz","12E-01Hz","10E-01Hz","80E-02Hz","70E-02Hz","60E-02Hz","50E-02Hz"}
];
raw=Import[file,"Text"];
biasVoltage=First@StringCases[raw,"Init E (V) = "~~n:NumberString:>n~~"V"];
dataSection=StringDrop[raw,StringPosition[raw,"Freq/Hz, Z'/ohm, Z\"/ohm, Z/ohm, Phase/deg\n\n"][[1,2]]];
allData=ImportString[dataSection,"CSV"];
frequencyLabels=allData[[All,1]]/.biasVtoLabelRule;
responses=Transpose@allData[[All,2;;]];
{
Flatten@Table[StringJoin[responsetype,biasVoltage,freq],{responsetype,{"Z'","Z\"","Z","ph"}},{freq,frequencyLabels}],
Flatten@responses
}
]

iProcessFile[file_String]:=
Module[{raw,startingVoltage,dataOnly},
raw=Import[file,"Text"];
startingVoltage=First@StringCases[raw,"Init E (V) = "~~n:NumberString:>n];
dataOnly=StringDrop[raw,StringPosition[raw,"Freq/Hz, Z'/ohm, Z\"/ohm, Z/ohm, Phase/deg\n\n"][[1,2]]];
<|startingVoltage->ImportString[dataOnly,"CSV"]|>
]


(* ::Section::Initialization:: *)
(*Closing out the package*)


(* ::Input::Initialization:: *)
End[];

Protect[importEIS,iFileToColumns,iProcessFile];

EndPackage[];
