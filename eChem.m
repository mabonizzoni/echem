(* ::Package:: *)

(************************************************************************)\012(* This file was generated automatically by the Mathematica front end.  *)\012(* It contains Initialization cells from a Notebook file, which         *)\012(* typically will have the same name as this file except ending in      *)\012(* ".nb" instead of ".m".                                               *)\012(*                                                                      *)\012(* This file is intended to be loaded into the Mathematica kernel using *)\012(* the package loading commands Get or Needs.  Doing so is equivalent   *)\012(* to using the Evaluate Initialization Cells menu command in the front *)\012(* end.                                                                 *)\012(*                                                                      *)\012(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)\012(* automatically each time the parent Notebook file is saved in the     *)\012(* Mathematica front end.  Any changes you make to this file will be    *)\012(* overwritten.                                                         *)\012(************************************************************************)\012\012

(* ::Input::Initialization:: *)
(* The following forces the automatic generation / overwriting of an .m package file from this file every time this file is saved. *)
SetOptions[InputNotebook[],AutoGeneratedPackage->Automatic]


(* ::Input::Initialization:: *)
BeginPackage["echem`"]

Unprotect[importEIS,iFileToColumns,iProcessFile,showEIS];
ClearAll[importEIS,iFileToColumns,iProcessFile,showEIS];


(* ::Input::Initialization:: *)
importEIS::usage="usage for importEIS";
showEIS::usage="usage for importEIS";


(* ::Input::Initialization:: *)
Begin["`Private`"]


(* ::Input::Initialization:: *)
importEIS[directory_String,format_String:"*.csv","output"->"plot"]:=Association[iProcessFile/@FileNames[format,directory]]
importEIS[directory_String,format_String:"*.csv"]:=Join[##,2]&@@(iFileToColumns/@FileNames[format,directory])
importEIS[sampleNamesandLocations_List?(VectorQ[#,Head[#]===Rule&]&),format_String:"*.csv"]:=
Module[
{samplenames,locations,datamatrix,columnheaders},

(*Keys[] and Values[] also work on a list of Rules, the same as on an association*)
samplenames=Keys@sampleNamesandLocations;
locations=Values@sampleNamesandLocations;

columnheaders=importEIS[locations[[1]],format][[1]];
datamatrix=(importEIS[#,format]&/@locations)[[All,2]];
Join[List/@Insert[samplenames,"",1],Insert[datamatrix,columnheaders,1],2]
]

iFileToColumns[file_String]:=Module[
{biasVtoLabelRule,raw,biasVoltage,dataSection,allData,frequencyLabels,responses},
biasVtoLabelRule=Thread[
{825200.`,681200.`,562300.`,464000.`,383100.`,316200.`,260900.`,215400.`,177800.`,146700.`,121100.`,99960.`,82520.`,68120.`,56230.`,46400.`,38280.`,31590.`,26070.`,21530.`,17770.`,14670.`,12110.`,9985.`,8179.`,6738.`,5566.`,4590.`,3809.`,3125.`,2588.`,2148.`,1758.`,1465.`,1196.`,976.6`,825.4`,681.3`,562.3`,464.2`,383.1`,316.2`,261.`,215.4`,177.8`,146.8`,121.2`,100.`,82.54`,68.13`,56.23`,46.42`,38.31`,31.62`,26.1`,21.54`,17.78`,14.68`,12.12`,10.`,8.254`,6.813`,5.623`,4.642`,3.831`,3.162`,2.61`,2.154`,1.778`,1.468`,1.212`,1.`,0.8254`,0.6813`,0.5623`,0.4642`}
->
{"80E+04Hz","70E+04Hz","60E+04Hz","50E+04Hz","40E+04Hz","30E+04Hz","25E+04Hz","20E+04Hz","18E+04Hz","15E+04Hz","12E+04Hz","10E+04Hz","80E+03Hz","70E+03Hz","60E+03Hz","50E+03Hz","40E+03Hz","30E+03Hz","25E+03Hz","20E+03Hz","18E+03Hz","15E+03Hz","12E+03Hz","10E+03Hz","80E+02Hz","70E+02Hz","60E+02Hz","50E+02Hz","40E+02Hz","30E+02Hz","25E+02Hz","20E+02Hz","18E+02Hz","15E+02Hz","12E+02Hz","10E+02Hz","80E+01Hz","70E+01Hz","60E+01Hz","50E+01Hz","40E+01Hz","30E+01Hz","25E+01Hz","20E+01Hz","18E+01Hz","15E+01Hz","12E+01Hz","10E+01Hz","80E+00Hz","70E+00Hz","60E+00Hz","50E+00Hz","40E+00Hz","30E+00Hz","25E+00Hz","20E+00Hz","18E+00Hz","15E+00Hz","12E+00Hz","10E+00Hz","80E-01Hz","70E-01Hz","60E-01Hz","50E-01Hz","40E-01Hz","30E-01Hz","25E-01Hz","20E-01Hz","18E-01Hz","15E-01Hz","12E-01Hz","10E-01Hz","80E-02Hz","70E-02Hz","60E-02Hz","50E-02Hz"}
];
raw=Import[file,"Text"];
biasVoltage=First@StringCases[raw,"Init E (V) = "~~n:NumberString:>n~~"V"];
dataSection=StringDrop[raw,StringPosition[raw,"Freq/Hz, Z'/ohm, Z\"/ohm, Z/ohm, Phase/deg\n\n"][[1,2]]];
allData=ImportString[dataSection,"CSV"];
frequencyLabels=allData[[All,1]]/.biasVtoLabelRule;
responses=Transpose@allData[[All,2;;]];
{
Flatten@Table[StringJoin[responsetype,biasVoltage,freq],{responsetype,{"Z'","Z\"","Z","ph"}},{freq,frequencyLabels}],
Flatten@responses
}
]

iProcessFile[file_String]:=
Module[{raw,startingVoltage,dataOnly},
raw=Import[file,"Text"];
startingVoltage=First@StringCases[raw,"Init E (V) = "~~n:NumberString:>n];
dataOnly=StringDrop[raw,StringPosition[raw,"Freq/Hz, Z'/ohm, Z\"/ohm, Z/ohm, Phase/deg\n\n"][[1,2]]];
<|startingVoltage->ImportString[dataOnly,"CSV"]|>
]


(* ::Input::Initialization:: *)
Options[showEIS]={ImageSize->1024,PlotRange->All,FrameStyle->Directive[Black,12]};

showEIS::incompdims="The number of datasets (`1`) and the number of labels provided (`2`) are not the same.";
showEIS[dataset_List?(VectorQ[#,AssociationQ]&),sampleLabels_List?(VectorQ[#,StringQ]&),OptionsPattern[]]/;Length[dataset]=!=Length[sampleLabels]:=
Message[showEIS::incompdims,Length[dataset],Length[sampleLabels]]

showEIS[dataset_List?(VectorQ[#,AssociationQ]&),opts:OptionsPattern[]]:=showEIS[dataset,ToString/@Range[Length[dataset]],opts]

showEIS[dataset_List?(VectorQ[#,AssociationQ]&),sampleLabels_List?(VectorQ[#,StringQ]&),OptionsPattern[]]/;Length[dataset]===Length[sampleLabels]:=
DynamicModule[
{quantity={"Frequency","Z'","Z\"","Z","Phase"},indices,x,y,biasV,scaleX,scaleY,colordata},
(*Set the list of colors used for plotting*)
(*The default plot colors used to be ColorData[97], but changed to ColorData[116] in version 14.2*)
Which[
$VersionNumber>=14.2,
colordata=ColorData["DefaultPlotColors"],
True,
colordata=ColorData[97]
];
Manipulate[
ListLinePlot[
(*The selector function works as follows:
dataset[[
biasV(*extract datasets for the selected bias voltages*),
All(*take results for all frequencies for each bias voltage*),
{x,y}(*take columns x and y from among the results for each frequency measurement (e.g. {1,5} would be frequency and phase)*)
]]*)
Map[
#[[biasV,All,{x,y}]]&,
dataset[[Sort@indices]]
],
PlotLegends->sampleLabels[[Sort@indices]],
(*This PlotStyle directive forces a constant color for each dataset, even when not all datasets are selected*)
PlotStyle->(colordata/@Sort[indices]),
Joined->True,InterpolationOrder->1,
PlotRange->OptionValue[PlotRange],ImageSize->OptionValue[ImageSize],
AspectRatio->If[(*Z' is the x axis*)x===2,(*determine AspectRatio that draws proper round circles*)Automatic,(*otherwise use the default*)1/GoldenRatio],
ScalingFunctions->{scaleX,scaleY},
Frame->True,Axes->False,
FrameStyle->OptionValue[FrameStyle],
FrameLabel->(Style[#,14]&/@{quantity[[x]],quantity[[y]]}),
Which[
$VersionNumber>=14.3,
PlotInteractivity->False(*a newer way to turn off ALL interactive features in plots, including plot highlighting*),
$VersionNumber>=13.3,
PlotHighlighting->None(*turn off resource-hogging automatic labels, tooltips, etc. in plots*),
True,
Unevaluated[Sequence[]](*if the running version is older than 13.3, effectively return nothing*)
]
],
Grid[{
{"datasets",Control[{{indices,Range[1,Length[sampleLabels]],""},MapIndexed[#2[[1]]->#1&,sampleLabels],TogglerBar}]},
(* Some of the strings below have labels ("-0.2" -> -0.2) because the strings representing negative numbers were not formatting correctly on the SetterBar *)
(* this is not a proper solution, but it patches the problem for now*)
{"bias point",Control[{{biasV,"0",""},{"0.8","0.6","0.4","0.2","0"->0,"-0.2"->-0.2,"-0.4"->-0.4,"-0.6"->-0.6},SetterBar}]},
{"horizontal axis",Control[ {{x,1,""},MapIndexed[#2[[1]]->#1&,quantity] } ],"scaling",Control[{{scaleX,"Log10",""},{None,"Log10","Reverse"}}]},
{"vertical axis",Control@{{y,4,""},MapIndexed[#2[[1]]->#1&,quantity]},"scaling",Control[{{scaleY,"Log10",""},{None,"Log10","Reverse"}}]}
},
Alignment->Left]
]
]


(* ::Input::Initialization:: *)
End[];

Protect[importEIS,iFileToColumns,iProcessFile,showEIS];

EndPackage[];
